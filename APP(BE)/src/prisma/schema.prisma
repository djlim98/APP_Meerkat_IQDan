// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = "mysql://root:password@localhost:3307/dev"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  userId          Int          @id @default(autoincrement())
  uid             String          @unique
  password        String 
  name            String
  serviceNumber   String          @unique
  affiliatedUnit  String?
  militaryRank    String?
  image           String?
  enlistmentDate  DateTime?       @default(now())

  chatrooms       UsersOnChatrooms[]
  messages        Message[]
  followedBy      Friends[]       @relation("following")
  following       Friends[]       @relation("follower")
  commanders      ChatroomCommanders[]
  publicKeys      PublicKey[]
  chatroomKeys    ChatroomKey[]
  allClearResponses AllClearResponse[]
}

model Friends {
  follower        User            @relation("follower", fields: [followerId], references: [userId])
  followerId      Int

  following       User            @relation("following", fields: [followingId], references: [userId])
  followingId     Int

  @@id([followerId, followingId])
}

model UsersOnChatrooms{
  chatroom            Chatroom        @relation(fields: [chatroomId], references: [chatroomId])
  chatroomId          Int

  user                User            @relation(fields: [userId], references: [userId])
  userId              Int

  recentReadMessageId Int             @default(-1)

  @@id([chatroomId, userId])
}

enum ChatroomType{
  SINGLE
  MULTI
}

enum ChatRemoveType {
  FROMSERVER
  FROMEARTH
}

model Chatroom{
  chatroomId      Int          @id @default(autoincrement())
  name            String?
  type            ChatroomType    @default(SINGLE)
  createDate      DateTime        @default(now())
  updateDate      DateTime?       @updatedAt
  msgExpTime      Int             @default(2592000) /// 30 days till expiration
  removeAfterRead Boolean         @default(true)
  removeType      ChatRemoveType  @default(FROMSERVER)

  users           UsersOnChatrooms[]
  messages        Message[]
  commanders      ChatroomCommanders[]
  chatroomKeys    ChatroomKey[]
}

model ChatroomCommanders{
  commanderId     Int         @id @default(autoincrement())
  chatroom        Chatroom    @relation(fields: [chatroomId], references: [chatroomId])
  chatroomId      Int        
  user            User        @relation(fields: [userId], references: [userId])
  userId          Int         
}

model Message{
  messageId           Int             @id @default(autoincrement())
  content             String
  sendTime            DateTime        @default(now())
  deleteTime          DateTime        /// 메시지 삭제될 시간
  hasQuickReply       Boolean         @default(false)

  sender              User            @relation(fields: [senderId], references: [userId])
  senderId            Int

  belongChatroom      Chatroom        @relation(fields: [belongChatroomId], references: [chatroomId])          
  belongChatroomId    Int

  allClear            AllClear?
}

model AllClear{
  allClearId          Int             @id @default(autoincrement())

  message             Message         @relation(fields: [messageId], references: [messageId])
  messageId           Int             @unique

  allClearResponses   AllClearResponse[]
}

enum AllClearResponseType{
  CLEAR
  PROBLEM
}

model AllClearResponse{
  allClearResponseId  Int           @id @default(autoincrement())
  type                AllClearResponseType
  content             String

  allClear            AllClear      @relation(fields: [allClearId], references: [allClearId])
  allClearId          Int

  user                User          @relation(fields: [userId], references: [userId])
  userId              Int

  @@unique([userId, allClearId])
}

model PublicKey{
  user              User              @relation(fields: [userId], references: [userId])
  userId            Int               @id

  publicKey         String            @db.VarChar(2000)

}

model ChatroomKey{
  
  user             User           @relation(fields: [forUserId], references: [userId])
  forUserId        Int
  
  chatroom         Chatroom        @relation(fields: [forChatroomId], references: [chatroomId])
  forChatroomId      Int

  encryptedKey     String           @db.VarChar(2000)

  @@id([forUserId, forChatroomId])
}
